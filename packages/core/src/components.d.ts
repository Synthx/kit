/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Icon } from "./components/icon/icon-data";
export { Icon } from "./components/icon/icon-data";
export namespace Components {
    interface KitButton {
        "disabled": boolean;
        "loading": boolean;
        "shape": "rounded" | "square" | "pill";
        "type": "button" | "submit" | "reset";
        "variant": "filled" | "outlined" | "underline" | "ghost";
    }
    interface KitHelloWorld {
    }
    interface KitIcon {
        "name": Icon;
    }
    interface KitIconButton {
        "disabled": boolean;
        "shape": "rounded" | "square" | "circle";
        "type": "button" | "submit" | "reset";
        "variant": "filled" | "outlined" | "ghost";
    }
    interface KitSpinButton {
        "max"?: number;
        "min"?: number;
        "step": number;
    }
    interface KitSpinner {
        "size": "small" | "medium" | "large";
    }
}
export interface KitButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKitButtonElement;
}
export interface KitIconButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKitIconButtonElement;
}
export interface KitSpinButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKitSpinButtonElement;
}
declare global {
    interface HTMLKitButtonElementEventMap {
        "tapped": MouseEvent;
    }
    interface HTMLKitButtonElement extends Components.KitButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKitButtonElementEventMap>(type: K, listener: (this: HTMLKitButtonElement, ev: KitButtonCustomEvent<HTMLKitButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKitButtonElementEventMap>(type: K, listener: (this: HTMLKitButtonElement, ev: KitButtonCustomEvent<HTMLKitButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKitButtonElement: {
        prototype: HTMLKitButtonElement;
        new (): HTMLKitButtonElement;
    };
    interface HTMLKitHelloWorldElement extends Components.KitHelloWorld, HTMLStencilElement {
    }
    var HTMLKitHelloWorldElement: {
        prototype: HTMLKitHelloWorldElement;
        new (): HTMLKitHelloWorldElement;
    };
    interface HTMLKitIconElement extends Components.KitIcon, HTMLStencilElement {
    }
    var HTMLKitIconElement: {
        prototype: HTMLKitIconElement;
        new (): HTMLKitIconElement;
    };
    interface HTMLKitIconButtonElementEventMap {
        "tapped": MouseEvent;
    }
    interface HTMLKitIconButtonElement extends Components.KitIconButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKitIconButtonElementEventMap>(type: K, listener: (this: HTMLKitIconButtonElement, ev: KitIconButtonCustomEvent<HTMLKitIconButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKitIconButtonElementEventMap>(type: K, listener: (this: HTMLKitIconButtonElement, ev: KitIconButtonCustomEvent<HTMLKitIconButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKitIconButtonElement: {
        prototype: HTMLKitIconButtonElement;
        new (): HTMLKitIconButtonElement;
    };
    interface HTMLKitSpinButtonElementEventMap {
        "counterChanged": number;
    }
    interface HTMLKitSpinButtonElement extends Components.KitSpinButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKitSpinButtonElementEventMap>(type: K, listener: (this: HTMLKitSpinButtonElement, ev: KitSpinButtonCustomEvent<HTMLKitSpinButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKitSpinButtonElementEventMap>(type: K, listener: (this: HTMLKitSpinButtonElement, ev: KitSpinButtonCustomEvent<HTMLKitSpinButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKitSpinButtonElement: {
        prototype: HTMLKitSpinButtonElement;
        new (): HTMLKitSpinButtonElement;
    };
    interface HTMLKitSpinnerElement extends Components.KitSpinner, HTMLStencilElement {
    }
    var HTMLKitSpinnerElement: {
        prototype: HTMLKitSpinnerElement;
        new (): HTMLKitSpinnerElement;
    };
    interface HTMLElementTagNameMap {
        "kit-button": HTMLKitButtonElement;
        "kit-hello-world": HTMLKitHelloWorldElement;
        "kit-icon": HTMLKitIconElement;
        "kit-icon-button": HTMLKitIconButtonElement;
        "kit-spin-button": HTMLKitSpinButtonElement;
        "kit-spinner": HTMLKitSpinnerElement;
    }
}
declare namespace LocalJSX {
    interface KitButton {
        "disabled"?: boolean;
        "loading"?: boolean;
        "onTapped"?: (event: KitButtonCustomEvent<MouseEvent>) => void;
        "shape"?: "rounded" | "square" | "pill";
        "type"?: "button" | "submit" | "reset";
        "variant"?: "filled" | "outlined" | "underline" | "ghost";
    }
    interface KitHelloWorld {
    }
    interface KitIcon {
        "name": Icon;
    }
    interface KitIconButton {
        "disabled"?: boolean;
        "onTapped"?: (event: KitIconButtonCustomEvent<MouseEvent>) => void;
        "shape"?: "rounded" | "square" | "circle";
        "type"?: "button" | "submit" | "reset";
        "variant"?: "filled" | "outlined" | "ghost";
    }
    interface KitSpinButton {
        "max"?: number;
        "min"?: number;
        "onCounterChanged"?: (event: KitSpinButtonCustomEvent<number>) => void;
        "step"?: number;
    }
    interface KitSpinner {
        "size"?: "small" | "medium" | "large";
    }
    interface IntrinsicElements {
        "kit-button": KitButton;
        "kit-hello-world": KitHelloWorld;
        "kit-icon": KitIcon;
        "kit-icon-button": KitIconButton;
        "kit-spin-button": KitSpinButton;
        "kit-spinner": KitSpinner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kit-button": LocalJSX.KitButton & JSXBase.HTMLAttributes<HTMLKitButtonElement>;
            "kit-hello-world": LocalJSX.KitHelloWorld & JSXBase.HTMLAttributes<HTMLKitHelloWorldElement>;
            "kit-icon": LocalJSX.KitIcon & JSXBase.HTMLAttributes<HTMLKitIconElement>;
            "kit-icon-button": LocalJSX.KitIconButton & JSXBase.HTMLAttributes<HTMLKitIconButtonElement>;
            "kit-spin-button": LocalJSX.KitSpinButton & JSXBase.HTMLAttributes<HTMLKitSpinButtonElement>;
            "kit-spinner": LocalJSX.KitSpinner & JSXBase.HTMLAttributes<HTMLKitSpinnerElement>;
        }
    }
}
